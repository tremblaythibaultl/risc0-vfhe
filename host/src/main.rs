use std::time::Instant;

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{BR_ELF, BR_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use ttfhe::{
    ggsw::{compute_bsk, BootstrappingKey},
    glwe::{keygen, GlweCiphertext},
    lwe::{lwe_keygen, LweCiphertext},
    utils::encode,
};

fn main() {
    let sk1 = lwe_keygen();
    let sk2 = keygen();
    let bsk = compute_bsk(&sk1, &sk2); // list of encryptions under `sk2` of the bits of `sk1`.

    let c = LweCiphertext::encrypt(encode(2), &sk1).modswitch(); // "noisy" ciphertext that will be bootstrapped

    step_by_step_blind_rotation(&c, &bsk);
}

fn step_by_step_blind_rotation(c: &LweCiphertext, bsk: &BootstrappingKey) {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut c_prime = GlweCiphertext::trivial_encrypt_lut_poly();

    // multiply by X^-b over the polynomial ring
    c_prime.body = c_prime.body.multiply_by_monomial((2048 - c.body) as usize);

    for i in 0..bsk.len() {
        let now = Instant::now();

        // An executor environment describes the configurations for the zkVM
        // including program inputs.

        // For example:
        let env = ExecutorEnv::builder()
            .write(&bsk[i])
            .unwrap()
            .write(&c_prime)
            .unwrap()
            .write(&c_prime.rotate(c.mask[i]))
            .unwrap()
            .build()
            .unwrap();

        // Obtain the default prover.
        let prover = default_prover();

        // Proof information by proving the specified ELF binary.
        // This struct contains the receipt along with statistics about execution of the guest
        let prove_info = prover.prove(env, BR_ELF).unwrap();

        // extract the receipt.
        let receipt = prove_info.receipt;

        // The receipt was verified at the end of proving, but the below code is an
        // example of how someone else could verify this receipt.
        receipt.verify(BR_ID).unwrap();

        c_prime = receipt.journal.decode().unwrap();

        println!(
            "Computed blind rotation step number {i} in {}",
            now.elapsed().as_secs()
        );
    }
}
